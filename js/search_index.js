var search_data = {"index":{"searchIndex":["stac","api","conformance","client","httpclient","conformances()","conforms_to?()","from_url()","get()","new()","new()","changelog","readme"],"longSearchIndex":["stac","stac::api","stac::api::conformance","stac::client","stac::client::httpclient","stac::client#conformances()","stac::client#conforms_to?()","stac::client::from_url()","stac::client::httpclient#get()","stac::client::new()","stac::client::httpclient::new()","",""],"info":[["STAC","","STAC.html","",""],["STAC::API","","STAC/API.html","",""],["STAC::API::Conformance","","STAC/API/Conformance.html","",""],["STAC::Client","","STAC/Client.html","","<p>Client for interacting with the root of a STAC API.\n"],["STAC::Client::HTTPClient","","STAC/Client/HTTPClient.html","","<p>A HTTP Client, wrapper of Faraday.\n"],["conformances","STAC::Client","STAC/Client.html#method-i-conformances","()","<p>Returns the value of “conformsTo” field.\n"],["conforms_to?","STAC::Client","STAC/Client.html#method-i-conforms_to-3F","(conformance)","<p>Returns wether the API conforms to the given standard.\n<p>The argument should be a constant of STAC::API::Conformance …\n"],["from_url","STAC::Client","STAC/Client.html#method-c-from_url","(url, params: {}, headers: {}, **http_options)","<p>Returns a Client instance from STAC API landing page URL.\n<p>Raises STAC::TypeError when the fetched JSON …\n"],["get","STAC::Client::HTTPClient","STAC/Client/HTTPClient.html#method-i-get","(uri)","<p>Makes a HTTP request and returns the response body as String.\n"],["new","STAC::Client","STAC/Client.html#method-c-new","(catalog)",""],["new","STAC::Client::HTTPClient","STAC/Client/HTTPClient.html#method-c-new","(**options)",""],["CHANGELOG","","CHANGELOG_md.html","","<p>[Unreleased]\n<p>[0.1.0] - 2022-10-24\n<p>Initial release\n"],["README","","README_md.html","","<p>stac-client-ruby\n<p>A Ruby client for working with STAC Catalogs and API.\n<p>Installation\n"]]}}